generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_PRISMA_URL")
  directUrl = env("DB_URL_NON_POOLING")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  email     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                  @id @unique @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          Boolean?                @default(false)
  picture                String?
  githubId               Int?                    @unique
  walletAddress          String?                 @unique
  stripeCustomerId       String?                 @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?                 @unique @map("stripe_subscription_id")
  stripePriceId          String?                 @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?               @map("stripe_current_period_end")
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  emailVerificationCodes EmailVerificationCode[]
  projects               Project[]
  sessions               Session[]
}

model Project {
  id             String          @id @default(cuid())
  name           String
  domain         String
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  dapps          dApp[]
  smartcontracts smartContract[]
}

model dApp {
  id          String       @id @default(cuid())
  name        String
  description String
  projectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  components  Components[] @relation("ComponentsTodApp")
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model smartContract {
  id          String       @id @default(cuid())
  name        String
  description String?
  projectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  components  Components[] @relation("ComponentsTosmartContract")
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Components {
  id             String          @id @default(cuid())
  name           String
  type           String
  components     String[]
  dapps          dApp[]          @relation("ComponentsTodApp")
  smartcontracts smartContract[] @relation("ComponentsTosmartContract")
}
